# Based on intermediate profile of Mozilla SSL Configuration Generator
# See https://mozilla.github.io/server-side-tls/ssl-config-generator
#
# PLEASE keep this config and documentation up-to-date!
#
# Last updated from Mozilla: 2015-08-28
#
# Changes:
# - use Google's DNS resolvers
#
# Steps to produce cert, key, and trustchain files:
#
# 1. Generate dhparam:
#   openssl dhparam -out secrets/wikipedia-on-ipfs.org.dhparam.pem 2048
#
# 2. Obtain lets-encrypt-x3-cross-signed.pem and isrgrootx1.pem
#
# 3. Fetch the certificate and key from the certs host:
#   scp 'root@earth.i.ipfs.io:/root/.caddy/acme/acme-v02.api.letsencrypt.org/sites/wikipedia-on-ipfs.org/*.{crt,key}' secrets/
#
# 4. Build trustchains:
#   cat lets-encrypt-x3-cross-signed.pem >> secrets/wikipedia-on-ipfs.org.crt
#   cat isrgrootx1.pem >> secrets/wikipedia-on-ipfs.org.trustchain.crt
#   cat lets-encrypt-x3-cross-signed.pem >> secrets/wikipedia-on-ipfs.org.trustchain.crt
#
# Also see: https://www.digitalocean.com/community/tutorials/openssl-essentials-working-with-ssl-certificates-private-keys-and-csrs

# certs sent to the client in SERVER HELLO are concatenated in ssl_certificate
# XXX: ssl_certificate and ssl_certificate_key are defined in the respective vhosts.

# session tickets
ssl_session_timeout 1d;
ssl_session_cache shared:SSL:50m;

# Diffie-Hellman parameter for DHE ciphersuites, recommended 2048 bits
# XXX: ssl_dhparam is defined in the respective vhosts.

# modern configuration. tweak to your needs.
ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
ssl_ciphers 'ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!3DES:!MD5:!PSK';
ssl_prefer_server_ciphers on;

# OCSP Stapling ---
# fetch OCSP records from URL in ssl_certificate and cache them
ssl_stapling on;
ssl_stapling_verify on;

## verify chain of trust of OCSP response using Root CA and Intermediate certs
# XXX: ssl_trusted_certificate is defined in the respective vhosts.

resolver 8.8.8.8 8.8.4.4;