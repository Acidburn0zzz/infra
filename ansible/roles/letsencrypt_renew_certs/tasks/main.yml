---
- name: include role vars
  include_vars: "all.yml"

# Create a temp file from privkey
- name: Create tempfile for cert
  delegate_to: localhost
  run_once: true
  tempfile:
    state:  file
    suffix: config
  register: temp_cert

- name: Fetch existing certificate from gateway
  run_once: true
  fetch:
    src: "/etc/nginx/gateway.crt"
    dest: "{{ temp_cert.path }}"
    flat: yes

- name: renew cert if needed
  delegate_to: localhost
  run_once: true
  block:
    # Create a temp file from privkey
    - name: Create tempfile for privkey
      tempfile:
        state:  file
        suffix: config
      register: temp_privkey

    # Render CSR into tempfile
    - name: Populate privkey file
      copy:
        content: "{{ letsencrypt_private_key_pem }}"
        dest: "{{ temp_privkey.path }}"

    # Create a temp file for CSR
    - name: Create tempfile for CSR
      tempfile:
        state:  file
        suffix: config
      register: temp_csr

    - name: Generate CSR
      openssl_csr:
        path: "{{ temp_csr.path }}"
        privatekey_path: "{{ temp_privkey.path }}"
        subject_alt_name: "{{ item.value | map('regex_replace', '^', 'DNS:') | list }}"
      with_dict:
        dns: "{{ dns_alt_names | map(attribute='alt_name') | list }}"

    - name: Create a challenge using a account key file.
      acme_certificate:
        modify_account: no
        account_key_content: "{{ letsencrypt_account_key_pem }}"
        account_email: infra-accounts@protocol.ai
        csr: "{{ temp_csr.path }}"
        cert: "{{ temp_cert.path }}"
        challenge: dns-01
        acme_version: 2
        acme_directory: https://acme-v02.api.letsencrypt.org/directory
        remaining_days: 10
      register: acme_challenge

    - name: Display Challenge
      debug:
        var: acme_challenge
        verbosity: 3

    # - name: Display Challenges in loop
    #   debug:
    #     msg: "{{ item.key | regex_replace('^_acme-challenge\\.', '') }} \n {{ item.value | regex_replace('^(.*)$', '\"\\1\"') }}"
    #     verbosity: 3
    #   with_dict: "{{ acme_challenge.challenge_data_dns }}"


    - name: Populate dns facts
      set_fact:
        # lookup domain for acme-challenge record
        # needed because some 'domains' are ALIASes (dev.js.ipfs.io is an ALIAS under js.ipfs.io)
        dns_records: "{{ dns_records|default([]) + [ {'le_record': item.key, 'val': item.value, 'domain': dns_alt_names | selectattr('le_challenge_domain', 'match', item.key | regex_replace('^_acme-challenge\\.', '') ) | map(attribute='dnsimple_domain') | list | first} ] }}"
      with_dict: "{{ acme_challenge.challenge_data_dns }}"

    - name: Display dns facts
      debug:
        var: dns_records
        verbosity: 3

    - name: Create TXT records from LE
      dnsimple:
        account_api_token: "{{ dnsimple_oauth_token }}"
        account_email: infra-accounts@protocol.ai
        domain: "{{ item.domain }}"
        # remove domain name from record
        record: "{{ item.le_record | regex_replace('^(.*)\\.' + item.domain + '$', '\\1') }}"
        type: "TXT"
        # quote record value
        value: "{{ item.val | regex_replace('^(.*)$', '\"\\1\"') }}"
        state: "present"
      with_items:
        - "{{ dns_records }}"
      when: acme_challenge is changed

    #- name: Let the challenge be validated and retrieve the cert and intermediate certificate
    #  acme_certificate:
    #    account_key_content: "{{ letsencrypt_account_key_pem }}"
    #    account_email: account_email: infra-accounts@protocol.ai
    #    csr: "{{ temp_csr.path }}"
    #    cert: "{{ temp_cert.path }}"
    #    fullchain: /etc/httpd/ssl/sample.com-fullchain.crt
    #    # for ssl_trusted_certificate in nginx
    #    chain: /etc/httpd/ssl/sample.com-intermediate.crt
    #    challenge: dns-01
    #    acme_version: 2
    #    acme_directory: https://acme-v02.api.letsencrypt.org/directory
    #    remaining_days: 10
    #    data: "{{ acme_challenge }}"
    #  when: acme_challenge is changed
