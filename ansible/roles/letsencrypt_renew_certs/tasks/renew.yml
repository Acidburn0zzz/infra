---
- name: Create tempfile for cert
  delegate_to: localhost
  run_once: true
  tempfile:
    prefix: "crt."
    state:  file
  register: temp_cert
  changed_when: False

- name: Fetch existing certificate from a gateway
  run_once: true
  fetch:
    src: "{{ cert_path }}"
    dest: "{{ temp_cert.path }}"
    flat: yes
  changed_when: False


- name: Create tempfile for intermediate chain
  delegate_to: localhost
  run_once: true
  tempfile:
    prefix: "intermediate."
    state:  file
  register: temp_chain
  changed_when: False

- name: Fetch existing intermediate chain from a gateway
  run_once: true
  fetch:
    src: "{{ trustchain_path }}"
    dest: "{{ temp_chain.path }}"
    flat: yes
  changed_when: False


# renew through LE
- name: renew cert if needed
  delegate_to: localhost
  run_once: true
  block:
    # Create a temp file from privkey
    - name: Create tempfile for privkey
      tempfile:
        prefix: "key."
        state:  file
      register: temp_privkey
      changed_when: False

    # Render CSR into tempfile
    - name: Populate privkey file
      copy:
        content: "{{ letsencrypt_private_key_pem }}"
        dest: "{{ temp_privkey.path }}"
      changed_when: False

    # Create a temp file for CSR
    - name: Create tempfile for CSR
      tempfile:
        prefix: "csr."
        state:  file
      register: temp_csr
      changed_when: False

    - name: Generate CSR
      openssl_csr:
        path: "{{ temp_csr.path }}"
        privatekey_path: "{{ temp_privkey.path }}"
        subject_alt_name: "{{ item.value | map('regex_replace', '^', 'DNS:') | list }}"
      with_dict:
        dns: "{{ dns_alt_names | map(attribute='alt_name') | list }}"
      changed_when: False

    - name: Create a challenge using a account key file.
      acme_certificate:
        #modify_account: no
        modify_account: yes
        terms_agreed : yes
        account_key_content: "{{ letsencrypt_account_key_pem }}"
        account_email: infra-accounts@protocol.ai
        csr: "{{ temp_csr.path }}"
        cert: "{{ temp_cert.path }}"
        challenge: dns-01
        acme_version: 2
        # acme_directory: https://acme-v02.api.letsencrypt.org/directory
        acme_directory: https://acme-staging-v02.api.letsencrypt.org/directory
        remaining_days: 10
      register: acme_challenge

    - name: Display Challenge
      debug:
        var: acme_challenge
        verbosity: 3
      when: acme_challenge is changed

    - name: Populate dns facts
      set_fact:
        # lookup domain for acme-challenge record
        # needed because some 'domains' are ALIASes (dev.js.ipfs.io is an ALIAS under js.ipfs.io)
        dns_records: "{{ dns_records|default([]) + [ {'le_record': item.value['dns-01']['record'], 'val': item.value['dns-01']['resource_value'], 'domain': dns_alt_names | selectattr('alt_name', 'equalto', item.key) | map(attribute='dnsimple_domain') | first} ]  }}"
      with_dict: "{{ acme_challenge.challenge_data }}"
      when: acme_challenge is changed

    - name: Display dns facts
      debug:
        var: dns_records
        verbosity: 3
      when: acme_challenge is changed

    - name: Create TXT records from LE
      dnsimple:
        account_api_token: "{{ dnsimple_oauth_token }}"
        account_email: infra-accounts@protocol.ai
        domain: "{{ item.domain }}"
        # remove domain name from record
        record: "{{ item.le_record | regex_replace('^(.*)\\.' + item.domain + '$', '\\1') }}"
        type: "TXT"
        value: |-
          {{ item.val|safe }}
        #value: "{{ item.val | regex_replace('^(.*)$', '\"\\1\"') }}"
        ttl: "60"
        state: "present"
      with_items:
        - "{{ dns_records }}"
      when: acme_challenge is changed

    # Create a temp file for full chain
    - name: Create tempfile for full chain
      delegate_to: localhost
      run_once: true
      tempfile:
        prefix: "fullchain."
        state:  file
      register: temp_fullchain
      when: acme_challenge is changed

    - name: Let the challenge be validated and retrieve the cert and intermediate certificate
      acme_certificate:
        # modify_account: no
        modify_account: yes
        terms_agreed : yes
        account_key_content: "{{ letsencrypt_account_key_pem }}"
        account_email: infra-accounts@protocol.ai
        csr: "{{ temp_csr.path }}"
        cert: "{{ temp_cert.path }}"
        fullchain: "{{ temp_fullchain.path }}"
        # for ssl_trusted_certificate in nginx
        chain: "{{ temp_chain.path }}"
        challenge: dns-01
        acme_version: 2
        # acme_directory: https://acme-v02.api.letsencrypt.org/directory
        acme_directory: https://acme-staging-v02.api.letsencrypt.org/directory
        remaining_days: 10
        data: "{{ acme_challenge }}"
      when: acme_challenge is changed
      register: acme_challenge_validated
  always:
    - name: Delete ACME TXT records from LE
      dnsimple:
        account_api_token: "{{ dnsimple_oauth_token }}"
        account_email: infra-accounts@protocol.ai
        domain: "{{ item.domain }}"
        # remove domain name from record
        record: "{{ item.le_record | regex_replace('^(.*)\\.' + item.domain + '$', '\\1') }}"
        type: "TXT"
        value: |-
          {{ item.val|safe }}
        ttl: "60"
        state: "absent"
      with_items:
        - "{{ dns_records }}"
      when: acme_challenge is changed

- name: "copy new cert & trustchain"
  # no_log: true
  copy:
    force: yes
    src: "{{ item.src }}"
    dest: "{{ item.path }}"
    mode: 0640
    owner: root
    group: www-data
  with_items:
    - { path: "{{ cert_path }}", src: "{{ temp_cert.path }}"}
    - { path: "{{ trustchain_path }}", src: "{{ temp_chain.path }}"}
  # notify:
  #   - "Restart_Nginx"
